@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MagnusApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<h4 class="my-5">Login</h4>
<p class="text-center mb-5 mt-5">Welcome back!<br /> Don't have an account? <a href="Account/Register">Sign up.</a></p>

<div class="ext-login mt-5">
    <ExternalLoginPicker />
</div>

<div class="d-flex justify-content-center gap-2 mb-4">
    <hr class="line-w" />
    <p class="cont-email">Or continue with Username/Email</p>
    <hr class="line-w" />
</div>

<section class="d-flex justify-content-center mb-5">
    <StatusMessage Message="@errorMessage" />

    <EditForm class="design p-3" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <h4 class="pt-2">Login</h4>

        <div>
            <InputText @bind-Value="Input.Email" class="form-control email" autocomplete="username" aria-required="true" placeholder="Email" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div>
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="d-flex">
            <div class="form-label mt-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                Remember me?        
            </div>
            <p class="mt-3 f-password">
                <a class="links" href="Account/ForgotPassword">Forgot password?</a>
            </p>
        </div>
        <div>
            <button type="submit" class="btn btn-primary mylogin-btn">Log in</button>
        </div>
        <div>
            <div class="bottom-links mt-3">
                <a class="links" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
            </div>
            <div class="bottom-links pb">
                <a class="links" href="Account/ResendEmailConfirmation">Resend email confirmation</a>
            </div>
        </div>
    </EditForm>
</section>
@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

