@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MagnusApp.Data


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

        <section class="d-flex justify-content-center">
            <StatusMessage Message="@errorMessage" />

@*             <SfCard ID="externallogin">
            </SfCard *@

            @*                   <div class="ext-login">
                        <ExternalLoginPicker />
                   </div>

            <SfDataForm  Width="400px" ID="Login" @ref="sfLogin" Model="@Input" OnValidSubmit="LoginUser" ButtonsAlignment="FormButtonsAlignment.Center">

                <FormValidator>
                    <DataAnnotationsValidator />
                </FormValidator>

                <FormItems>
                    <FormItem Field="@nameof(Input.Email)" LabelText="Email">
                        <Template>
                            <label>Email</label>
                            <SfTextBox Placeholder="Email*" @bind-Value="Input.Email"></SfTextBox>
                        </Template>
                    </FormItem>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />

                    <FormItem Field="@nameof(Input.Password)" LabelText="Password">
                        <Template>
                            <div class="lab-show">
                                <label>Password</label>
                                <a href="" @onclick="ShowPassword">Show</a>
                            </div>
                            <div>
                                <SfTextBox Autocomplete="AutoComplete.On" Type="InputType.Password" Placeholder="Password*" @bind-Value="Input.Password"></SfTextBox>
                                <p>
                                    <a href="Account/ForgotPassword">Forgot your password?</a>
                                </p>
                            </div>
                        </Template>
                    </FormItem>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />


                    <FormItem Field="@nameof(Input.RememberMe)">
                        <Template>
                            <SfCheckBox CssClass="check-box" Label="Remember me?" @bind-Checked="Input.RememberMe"></SfCheckBox>
                        </Template>
                    </FormItem>
                </FormItems>
                <FormButtons>
                    <div>
                        <SfButton CssClass="logintbtn" typeof="submit">Log in</SfButton>
                    </div>
                </FormButtons>

                <div class="reg-new">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a
                </div>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
            </SfDataForm> *@

            <EditForm class="form-control w-auto" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="px-3">
                    <div class="mt-3 d-flex justify-content-center">
                         <ExternalLoginPicker />
                    </div>
                <div>
                    <label class="mt-3">Email</label>
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div>
                        <label class="mt-3">Password</label>
                    <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                        <p>
                            <a class="text-decoration-none" href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
                <div>
                        <label class="form-label mt-3">
                    <InputCheckbox id="checkbox" @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me?
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                    <div class="mt-3">
                    <a  class="text-decoration-none mt-3" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </div> 
                    <a class="text-decoration-none" href="Account/ResendEmailConfirmation">Resend email confirmation</a>

                

                </div>
            </EditForm>
        </section>

@code {
    private string? errorMessage;

    public SfDataForm? sfLogin;

    public string TxtType = "password";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    //[SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public void ShowPassword()
    {
        if(this.TxtType=="password")
        {
            this.TxtType = "text";
        }
        else
        {
            this.TxtType = "password";
        }
    }
}

<style>
    .e-input-eye:before {
        content:'\e345';
        font-family: e-icons;
        font-size: 13px;
    }

</style>
